@model Dictionary<string, int>
@{
    ViewData["Title"] = "MatriculasAtivas";
}

<h2>Matriculas Ativas</h2>
<hr />

<div class="container-fluid mt--7">
    <div class="row">
        <div class="col-xl-7 mb-5 mb-xl-0">
            <div class="card bg-gradient-default shadow">
                <div class="card-header bg-transparent">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-light ls-1 mb-1">Matrículas ativas</h6>
                            <h2 class="text-white mb-0">Números</h2>
                        </div>
                        <div class="col">
                            <ul class="nav nav-pills justify-content-end">
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Chart -->
                    <div class="chart">
                        <div class="chartjs-size-monitor" style="position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px; overflow: hidden; pointer-events: none; visibility: hidden; z-index: -1;"><div class="chartjs-size-monitor-expand" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="chartjs-size-monitor-shrink" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div></div>
                        <!-- Chart wrapper -->
                        <canvas id="numero" class="chart-canvas chartjs-render-monitor" width="822" height="437" style="display: block; height: 350px; width: 658px;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-5">
            <div class="card shadow">
                <div class="card-header bg-transparent">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-muted ls-1 mb-1">Matrículas ativas</h6>
                            <h2 class="mb-0">Números</h2>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Chart -->
                    <table class="table table-hover table-sm">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">Total</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var curso in Model.OrderByDescending(m => m.Value).ToList())
{
                                <tr>
                                    <th scope="row">@curso.Key</th>
                                    <td>@curso.Value</td>
                                </tr>
}


                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="row mt-5">
        <div class="col-xl-7 mb-5 mb-xl-0">
            <div class="card shadow">
                <div class="card-header bg-transparent">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-muted ls-1 mb-1">Matrículas Ativas</h6>
                            <h2 class="mb-0">Porcentagem</h2>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <!-- Chart -->
                    <div class="chart">
                        <div class="chartjs-size-monitor" style="position: absolute; left: 0px; top: 0px; right: 0px; bottom: 0px; overflow: hidden; pointer-events: none; visibility: hidden; z-index: -1;"><div class="chartjs-size-monitor-expand" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="chartjs-size-monitor-shrink" style="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div></div>
                        <canvas id="porcentagem" class="chart-canvas chartjs-render-monitor" width="822" height="437" style="display: block; height: 350px; width: 658px;"></canvas>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-xl-5 mb-5 mb-xl-0">
            <div class="card shadow">
                <div class="card-header bg-transparent">
                    <div class="row align-items-center">
                        <div class="col">
                            <h6 class="text-uppercase text-muted ls-1 mb-1">Matrículas ativas</h6>
                            <h2 class="mb-0">Porcentagem</h2>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-hover table-sm">
                        <thead>
                            <tr>
                                <th scope="col">#</th>
                                <th scope="col">%</th>
                            </tr>
                        </thead>
                        <tbody>

                            @foreach (var curso in Model.Where(m => m.Key != "Total").OrderByDescending(m => m.Value).ToList())
                            {
                                var porcentagem = (float)curso.Value * 100 / Model.First(m => m.Key == "Total").Value;
                                <tr>
                                    <th scope="row">@curso.Key</th>
                                    <td>@porcentagem.ToString("0.00")%</td>
                                </tr>
                            }


                        </tbody>
                    </table>

                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts{

    <script>
        function getRandomColor(n) {
            let cores = [];
            for (let i = 0; i < n; i++) {
                const letters = '0123456789ABCDEF';
                let color = '#';
                for (let i = 0; i < 6; i++) {
                    color += letters[Math.floor(Math.random() * 16)];
                }
                cores.push(color);
            }

            return cores;
        }

        var color = Chart.helpers.color;
        var OrdersChart = (function() {

	        //
	        // Variables
	        //

	        var $chart = $('#numero');
	        var $ordersSelect = $('[name="ordersSelect"]');


	        //
	        // Methods
	        //

	        // Init chart
	        function initChart($chart) {

		        // Create chart
		        var ordersChart = new Chart($chart, {
			        type: 'horizontalBar',

			        data: {
                        labels: [
                            @foreach (var curso in Model.Where(m => m.Key != "Total").OrderByDescending(m => m.Value).ToList())
                               {
                                   <text>'@Html.Raw(curso.Key)',</text>
                               }
                        ],
				        datasets: [{
                            label: 'Sales',
                            
                            data: [
                                @foreach (var curso in Model.Where(m => m.Key != "Total").OrderByDescending(m => m.Value).ToList())
                                {
                                    <text>'@curso.Value',</text>
                                }
                            ]
				        }]
			        }
		        });

		        // Save to jQuery object
		        $chart.data('chart', ordersChart);
	        }


	        // Init chart
	        if ($chart.length) {
		        initChart($chart);
	        }

        })();
    </script>
    <script>
        var OrdersChart = (function () {

            //
            // Variables
            //

            var $chart = $('#porcentagem');
            var $ordersSelect = $('[name="ordersSelect"]');


            //
            // Methods
            //

            // Init chart
            function initChart($chart) {

                // Create chart
                var ordersChart = new Chart($chart, {
                    type: 'pie',

                    data: {
                        labels: [
                            @foreach (var curso in Model.Where(m => m.Key != "Total").OrderByDescending(m => m.Value).ToList())
                           {
                               <text>'@Html.Raw(curso.Key)',</text>
                           }
                        ],
                        datasets: [{
                            label: 'Sales',
                            data: [
                                @foreach (var curso in Model.Where(m => m.Key != "Total").OrderByDescending(m => m.Value).ToList())
                                {
                                    var porcentagem = curso.Value * 100 / Model.First(m => m.Key == "Total").Value;
                                    <text>'@porcentagem',</text>
                                }
                            ],
                            backgroundColor: getRandomColor(@Model.Where(m => m.Key != "Total").OrderByDescending(m => m.Value).ToList().Count)

                        }]
                    },
                    options: {

                    }
                });

                // Save to jQuery object
                $chart.data('chart', ordersChart);
            }


            // Init chart
            if ($chart.length) {
                initChart($chart);
            }

        })();
    </script>

}

