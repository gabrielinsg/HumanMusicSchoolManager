// <auto-generated />
using System;
using HumanMusicSchoolManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HumanMusicSchoolManager.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190215144637_DemostrativaConfirmado")]
    partial class DemostrativaConfirmado
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HumanMusicSchoolManager.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int>("PessoaId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PessoaId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Aula", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AulaDada");

                    b.Property<int>("CursoId");

                    b.Property<DateTime>("Data");

                    b.Property<DateTime>("DataLimite");

                    b.Property<string>("DescAtividades");

                    b.Property<int>("ProfessorId");

                    b.Property<int>("SalaId");

                    b.HasKey("Id");

                    b.HasIndex("CursoId");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SalaId");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Candidato", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CPF")
                        .IsRequired();

                    b.Property<string>("Cel");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.ToTable("Candidatos");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Chamada", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AulaId");

                    b.Property<string>("Observacao");

                    b.Property<int>("PacoteCompraId");

                    b.Property<bool?>("Presenca");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("PacoteCompraId");

                    b.ToTable("Chamadas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Contrato", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("Conteudo")
                        .IsRequired();

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Contratos");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Curso", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("QtdModulo");

                    b.HasKey("Id");

                    b.ToTable("Cursos");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.CursoProfessor", b =>
                {
                    b.Property<int>("ProfessorId");

                    b.Property<int>("CursoId");

                    b.HasKey("ProfessorId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("CursoProfessor");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.CursoSala", b =>
                {
                    b.Property<int>("SalaId");

                    b.Property<int>("CursoId");

                    b.HasKey("SalaId", "CursoId");

                    b.HasIndex("CursoId");

                    b.ToTable("CursoSala");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Demostrativa", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AulaId");

                    b.Property<int>("CandidatoId");

                    b.Property<int>("Confirmado");

                    b.Property<bool?>("Contratou");

                    b.Property<int>("CursoId");

                    b.Property<int?>("DispSalaId");

                    b.Property<int?>("Estrelas");

                    b.Property<int>("Motivo");

                    b.Property<string>("Observacao");

                    b.Property<string>("Outros");

                    b.Property<int>("PessoaId");

                    b.Property<bool?>("Presenca");

                    b.HasKey("Id");

                    b.HasIndex("AulaId");

                    b.HasIndex("CandidatoId");

                    b.HasIndex("CursoId");

                    b.HasIndex("DispSalaId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Demostrativas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.DispSala", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<int>("Dia");

                    b.Property<int>("Hora");

                    b.Property<int?>("ProfessorId");

                    b.Property<int?>("SalaId");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId");

                    b.HasIndex("SalaId");

                    b.ToTable("DispSalas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.EmailConfig", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Dominio")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Senha")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("EmailConfig");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Endereco", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired();

                    b.Property<string>("CEP")
                        .IsRequired();

                    b.Property<string>("Cidade")
                        .IsRequired();

                    b.Property<string>("Complemento");

                    b.Property<string>("Logradouro")
                        .IsRequired();

                    b.Property<int>("Numero");

                    b.Property<int>("UF");

                    b.HasKey("Id");

                    b.ToTable("Enderecos");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Evento", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataFinal");

                    b.Property<DateTime>("DataInicial");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Eventos");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Feriado", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DataFinal");

                    b.Property<DateTime>("DataInicial");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Feriados");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Financeiro", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlunoId");

                    b.Property<DateTime?>("DataPagamento");

                    b.Property<DateTime>("DataVencimento");

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FormaPagamento");

                    b.Property<decimal?>("Multa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int?>("PacoteCompraId");

                    b.Property<int?>("PessoaId");

                    b.Property<DateTime>("UltimaAlteracao");

                    b.Property<decimal?>("Valor")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ValorPago")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("PacoteCompraId");

                    b.HasIndex("PessoaId");

                    b.ToTable("Financeiros");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Matricula", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AlunoId");

                    b.Property<bool>("Ativo");

                    b.Property<int>("CursoId");

                    b.Property<DateTime>("DataMatricula");

                    b.Property<int?>("DispSalaId");

                    b.Property<DateTime?>("EncerramentoMatricula");

                    b.Property<int?>("Estrelas");

                    b.Property<int>("Modulo");

                    b.Property<int?>("RespFinanceiroId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AlunoId");

                    b.HasIndex("CursoId");

                    b.HasIndex("DispSalaId");

                    b.HasIndex("RespFinanceiroId");

                    b.ToTable("Matriculas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.PacoteAula", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<int>("ContratoId");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<int>("Parcela");

                    b.Property<int>("QtdAula");

                    b.Property<int>("TipoAula");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ContratoId");

                    b.ToTable("PacotesAula");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.PacoteCompra", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataCompra");

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MatriculaId");

                    b.Property<int>("PacoteAulaId");

                    b.Property<int>("QtdParcela");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("PacoteAulaId");

                    b.ToTable("PacoteCompras");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Pessoa", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<string>("CPF")
                        .IsRequired();

                    b.Property<string>("Cel");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email");

                    b.Property<int>("EnderecoId");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("RG")
                        .IsRequired();

                    b.Property<string>("Tel");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Pessoas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.RelatorioMatricula", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data");

                    b.Property<string>("Descricao");

                    b.Property<int>("MatriculaId");

                    b.Property<int>("PessoaId");

                    b.HasKey("Id");

                    b.HasIndex("MatriculaId");

                    b.HasIndex("PessoaId");

                    b.ToTable("RelatorioMatriculas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Reposicao", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChamadaId");

                    b.Property<int?>("DispSalaId");

                    b.Property<string>("Motivo");

                    b.Property<bool>("Remunerada");

                    b.HasKey("Id");

                    b.HasIndex("ChamadaId")
                        .IsUnique();

                    b.HasIndex("DispSalaId");

                    b.ToTable("Reposicoes");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Sala", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Ativo");

                    b.Property<int>("Capacidade");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Salas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.TaxaMatricula", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TaxaMatriculas");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Trancamento", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Data");

                    b.Property<DateTime>("DataFinal");

                    b.Property<DateTime>("DataInicial");

                    b.Property<int>("PacoteCompraId");

                    b.HasKey("Id");

                    b.HasIndex("PacoteCompraId")
                        .IsUnique();

                    b.ToTable("Trancamentos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Aluno", b =>
                {
                    b.HasBaseType("HumanMusicSchoolManager.Models.Models.Pessoa");


                    b.ToTable("Aluno");

                    b.HasDiscriminator().HasValue("Aluno");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Funcionario", b =>
                {
                    b.HasBaseType("HumanMusicSchoolManager.Models.Models.Pessoa");


                    b.ToTable("Funcionario");

                    b.HasDiscriminator().HasValue("Funcionario");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Professor", b =>
                {
                    b.HasBaseType("HumanMusicSchoolManager.Models.Models.Pessoa");


                    b.ToTable("Professor");

                    b.HasDiscriminator().HasValue("Professor");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.RespFinanceiro", b =>
                {
                    b.HasBaseType("HumanMusicSchoolManager.Models.Models.Pessoa");

                    b.Property<int>("EstadoCivil");

                    b.Property<string>("Nacionalidade")
                        .IsRequired();

                    b.Property<string>("Naturalidade")
                        .IsRequired();

                    b.Property<string>("OrgaoExpedidor")
                        .IsRequired();

                    b.Property<string>("Profissao")
                        .IsRequired();

                    b.ToTable("RespFinanceiro");

                    b.HasDiscriminator().HasValue("RespFinanceiro");
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.ApplicationUser", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Aula", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Professor", "Professor")
                        .WithMany("Aulas")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Chamada", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Aula", "Aula")
                        .WithMany("Chamadas")
                        .HasForeignKey("AulaId");

                    b.HasOne("HumanMusicSchoolManager.Models.Models.PacoteCompra", "PacoteCompra")
                        .WithMany("Chamadas")
                        .HasForeignKey("PacoteCompraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.CursoProfessor", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Curso", "Curso")
                        .WithMany("Professores")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Professor", "Professor")
                        .WithMany("Cursos")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.CursoSala", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Curso", "Curso")
                        .WithMany("Salas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Sala", "Sala")
                        .WithMany("Cursos")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Demostrativa", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Aula", "Aula")
                        .WithMany("Demostrativas")
                        .HasForeignKey("AulaId");

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Candidato", "Candidato")
                        .WithMany("Demostrativas")
                        .HasForeignKey("CandidatoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Curso", "Curso")
                        .WithMany("Demostrativas")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.DispSala", "DispSala")
                        .WithMany("Demostrativas")
                        .HasForeignKey("DispSalaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.DispSala", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Professor", "Professor")
                        .WithMany()
                        .HasForeignKey("ProfessorId");

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Sala", "Sala")
                        .WithMany("DispSalas")
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Financeiro", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Aluno", "Aluno")
                        .WithMany("Financeiros")
                        .HasForeignKey("AlunoId");

                    b.HasOne("HumanMusicSchoolManager.Models.Models.PacoteCompra", "PacoteCompra")
                        .WithMany("Financeiros")
                        .HasForeignKey("PacoteCompraId");

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Matricula", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Aluno", "Aluno")
                        .WithMany("Matriculas")
                        .HasForeignKey("AlunoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Curso", "Curso")
                        .WithMany()
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.DispSala", "DispSala")
                        .WithMany("Matriculas")
                        .HasForeignKey("DispSalaId");

                    b.HasOne("HumanMusicSchoolManager.Models.Models.RespFinanceiro", "RespFinanceiro")
                        .WithMany()
                        .HasForeignKey("RespFinanceiroId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.PacoteAula", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Contrato", "Contrato")
                        .WithMany()
                        .HasForeignKey("ContratoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.PacoteCompra", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Matricula", "Matricula")
                        .WithMany("PacoteCompras")
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.PacoteAula", "PacoteAula")
                        .WithMany()
                        .HasForeignKey("PacoteAulaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Pessoa", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.RelatorioMatricula", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Matricula", "Matricula")
                        .WithMany()
                        .HasForeignKey("MatriculaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Reposicao", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.Chamada", "Chamada")
                        .WithOne("Reposicao")
                        .HasForeignKey("HumanMusicSchoolManager.Models.Models.Reposicao", "ChamadaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.Models.DispSala", "DispSala")
                        .WithMany("Reposicoes")
                        .HasForeignKey("DispSalaId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HumanMusicSchoolManager.Models.Models.Trancamento", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.Models.PacoteCompra", "PacoteCompra")
                        .WithOne("Trancamento")
                        .HasForeignKey("HumanMusicSchoolManager.Models.Models.Trancamento", "PacoteCompraId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanMusicSchoolManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HumanMusicSchoolManager.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
